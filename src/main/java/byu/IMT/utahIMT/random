package byu.incidents;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.google.inject.Inject;
import com.univocity.parsers.common.record.Record;
import com.univocity.parsers.csv.CsvParser;
import com.univocity.parsers.csv.CsvParserSettings;

import org.matsim.api.core.v01.Scenario;
import org.matsim.api.core.v01.network.Link;
import org.matsim.api.core.v01.network.Network;
import org.matsim.core.network.NetworkChangeEvent;
import org.matsim.core.network.NetworkChangeEvent.ChangeType;
import org.matsim.core.network.NetworkChangeEvent.ChangeValue;
import org.matsim.core.network.NetworkUtils;

public class IncidentReader {

    private final Network network;
    private final List<Incident> incidentsSelected;

    @Inject
    public IncidentReader(Scenario scenario) {
        this.network = scenario.getNetwork();
        this.incidentsSelected = new ArrayList<>();
    }

    public void readIncidents(String csv) {
        List<Incident> allIncidents = parseCsv(csv);
        selectRandomIncidents(allIncidents);

        incidentsSelected.forEach(this::applyIncidentToNetwork);
    }

    public List<Incident> getIncidentsSelected() {
        return new ArrayList<>(incidentsSelected);
    }

    private List<Incident> parseCsv(String csv) {
        CsvParserSettings parserSettings = new CsvParserSettings();
        parserSettings.getFormat().setLineSeparator("\n");
        parserSettings.setHeaderExtractionEnabled(true);

        CsvParser parser = new CsvParser(parserSettings);
        List<Record> records = parser.parseAllRecords(new File(csv));

        List<Incident> incidents = new ArrayList<>();
        for (Record record : records) {
            String linkId = record.getString("MATSim Link");
            int incidentId = record.getInt("Incident ID");
            int respondingImts = record.getInt("Responding IMTs");
            double start = record.getDouble("Start Time (sec)");
            double end = record.getDouble("End Time (sec)");
            double reduction = record.getDouble("Capacity reduction (w/ TWA)");

            Incident incident = new Incident(linkId, incidentId, respondingImts, start, end, reduction);
            incidents.add(incident);
        }
        return incidents;
    }

    private void selectRandomIncidents(List<Incident> allIncidents) {
        IncidentGenerator generator = new IncidentGenerator();
        int incidentNumber = generator.getIncNum();
        Random random = new Random();

        for (int i = 0; i < incident
